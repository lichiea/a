#include <windows.h>

#include <iostream>

#include <GL/gl.h>
#include <GL/glu.h>
#include "GL/freeglut.h"

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include<vector>

using namespace glm;

// используем пространство имен стандартной библиотеки
using namespace std;

void smena(double);

int i = 0;
int a = 0;

vec3 white(1.0, 1.0, 1.0), blue(0.0, 0.0, 1.0), red(1.0, 0.0, 0.0), yellow(1.0, 1.0, 0.0), fiolet(0.5, 0.0, 1.0), grad(0.0,0.0,0.0);
vector<vec3> col = {white, blue, red, yellow, fiolet };

// КЛАСС ДЛЯ ПРЕДСТАВЛЕНИЯ ОДНОГО ГРАФИЧЕСКОГО ОБЪЕКТА
class GraphicObject
{
public:
    // Конструктор
    GraphicObject();
    // Установка и получение позиции объекта
    void setPosition(vec3 position);
    vec3 getPosition();
    // Установка и получения угла поворота в градусах
    // поворот осуществляется в горизонтальной плоскости
    // вокруг оси Oy по часовой стрелке
    void setAngle(float grad);
    float getAngle();
    // Установка текущего цвета объекта
    void setСolor(vec3 color);
    vec3 getColor();
    // Вывести объект
    void draw();
private:
    // Позиция объекта в глобальной системе координат
    vec3 position;
    // Угол поворота в горизонтальной плоскости (в градусах)
    float angle;
    // Цвет модели
    vec3 color;
    // Матрица модели (расположение объекта) - чтоб не вычислять каждый раз
    GLfloat modelMatrix[16];
private:
    // расчет матрицы modelMatrix на основе position и angle
    void recalculateModelMatrix();
};

// функция, вызываемая при изменении размеров окна
void reshape(int w, int h)
{
    // установить новую область просмотра, равную всей области окна
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);

    // установить матрицу проекции с правильным аспектом
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(25.0, (float)w / h, 0.2, 70.0);
};

// функция вызывается при перерисовке окна
// в том числе и принудительно, по командам glutPostRedisplay
void display(void)
{
    // отчищаем буфер цвета и буфер глубины
    glClearColor(0.00, 0.00, 0.00, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // включаем тест глубины
    glEnable(GL_DEPTH_TEST);

    // устанавливаем камеру
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(10, 15, 17.5, 0, 0, 0, 0, 1, 0);

    // выводим объект - красный (1,0,0) чайник
  
  //  glColor3f(grad.r, grad.g, grad.b);
  //  glutWireTeapot(1.0);

// выводим все графические объекты
//    for (auto& go : graphicObjects) {
  //      go.draw();
 //   }

    // Матрица модели правого чайника, в точке - (4,0,0)
    GLfloat modelMatrix0[16] = {//синий
    -1.0, 0.0, 0.0, 0.0, // ось Ox
    0.0, 1.0, 0.0, 0.0, // ось Oy
    0.0, 0.0, -1.0, 0.0, // ось Oz
    4.0, 0.0, 0.0, 1.0 // позиция объекта (начало системы координат)
    };
    // Матрица модели левого чайника, в точке - (-4,0,0)
    GLfloat modelMatrix1[16] = {//красный
    1.0, 0.0, 0.0, 0.0, // ось Ox
    0.0, 1.0, 0.0, 0.0, // ось Oy
    0.0, 0.0, 1.0, 0.0, // ось Oz
    -4.0, 0.0, 0.0, 1.0 // позиция объекта (начало системы координат)
    };
    GLfloat modelMatrix2[16] = {//зелёный
    0.0, 0.0, -1.0, 0.0, // ось Ox
    0.0, 1.0, 0.0, 0.0, // ось Oy
    -1.0, 0.0, 0.0, 0.0, // ось Oz
    0.0, 0.0, 4.0, 1.0 // позиция объекта (начало системы координат)
    };
    // Матрица модели левого чайника, в точке - (-4,0,0)
    GLfloat modelMatrix3[16] = {//белый
    0.0, 0.0, 1.0, 0.0, // ось Ox
    0.0, 1.0, 0.0, 0.0, // ось Oy
    1.0, 0.0, 0.0, 0.0, // ось Oz
    0.0, 0.0, -4.0, 1.0 // позиция объекта (начало системы координат)
    };
    // вывод правого нижнего чайника
    glColor3f(1, 0, 0);
    glPushMatrix();
    glMultMatrixf(modelMatrix0);
    glutWireTeapot(1.0);
    glPopMatrix();
    // вывод левого верхнего чайника
    glColor3f(0, 0, 1);
    glPushMatrix();
    glMultMatrixf(modelMatrix1);
    glutWireTeapot(1.0);
    glPopMatrix();
    // вывод левого нижнего чайника
    glColor3f(0, 1, 0);
    glPushMatrix();
    glMultMatrixf(modelMatrix2);
    glutWireTeapot(1.0);
    glPopMatrix();
    // вывод правого верхнего чайника
    glColor3f(1, 1, 1);
    glPushMatrix();
    glMultMatrixf(modelMatrix3);
    glutWireTeapot(1.0);
    glPopMatrix();


    // смена переднего и заднего буферов
    glutSwapBuffers();

};

// функция вызывается каждые 20 мс
void simulation(int value){
    // устанавливаем признак того, что окно нуждается в перерисовке
    glutPostRedisplay();
    // эта же функция будет вызвана еще раз через 20 мс
    glutTimerFunc(20, simulation, 0);
 //   smena(a);
};

vec3 temp (1.0,1.0,1.0);

void smena(double dop){
    a++;
    if (dop > 50){
        a = 0;
        i++;
        if (i > 5)i = 0;
        temp = col[i];
        col.push_back(temp);
    }
    grad.r = temp.r;
    grad.g = temp.g;
    grad.b = temp.b;

}

// Функция обработки нажатия клавиш
void keyboardFunc(unsigned char key, int x, int y)
{
    printf("Key code is %i\n", key);
    i++;
    if (i == 5) i = 0;
};

//vector<GraphicObject> graphicObjects;

void main(int argc, char** argv)
{
    setlocale(LC_ALL, "ru");

    // инициализация библиотеки GLUT
    glutInit(&argc, argv);
    // инициализация дисплея (формат вывода)
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE);

    // СОЗДАНИЕ ОКНА:
    // 1. устанавливаем верхний левый угол окна
    glutInitWindowPosition(200, 200);
    // 2. устанавливаем размер окна
    glutInitWindowSize(800, 600);
    // 3. создаем окно
    glutCreateWindow("Laba_03");

    // УСТАНОВКА ФУНКЦИЙ ОБРАТНОГО ВЫЗОВА
    // устанавливаем функцию, которая будет вызываться для перерисовки окна
    glutDisplayFunc(display);
    // устанавливаем функцию, которая будет вызываться при изменении размеров окна
    glutReshapeFunc(reshape);
    // устанавливаем функцию, которая будет вызвана через 20 мс
    glutTimerFunc(20, simulation, 0);
    // устанавливаем функцию, которая будет вызываться при нажатии на клавишу
    glutKeyboardFunc(keyboardFunc);

    // ИНИЦИАЛИЗАЦИЯ ДАННЫХ, НЕОБХОДИМЫХ ДЛЯ РАБОТЫ ПРОГРАММЫ:
    // инициализация графических объектов
 //  GraphicObject tempGraphicObject;
    // 1 -----------------------------------------
  //  tempGraphicObject.setPosition(vec3(5, 0, 0));
 //   tempGraphicObject.setAngle(180);
 //   tempGraphicObject.setСolor(vec3(1, 0, 0));
  //  graphicObjects.push_back(tempGraphicObject);
    // 2 -----------------------------------------

    // основной цикл обработки сообщений ОС
    glutMainLoop();
};
